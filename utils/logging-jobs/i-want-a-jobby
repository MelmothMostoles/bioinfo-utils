#! /usr/bin/python

#### i-want-a-jobby ####
#
# script to add jobs to the /etc/bioinfo.jobs.list
#
# will be called with
# i-want-a-jobby <program name> <start> <duration> <CPUs> <RAM>
# Where:
#	argv[0] (unsued, =='i-want-a-jobby')
#	argv[1]: <program name>	Any text - if "status" is used the current jobs list will be printed
#	argv[2]: <start>	One of: 'now' 'yyyy-mm-dd' 'yyyy-mm-dd hh:mm'
#	argv[3]: <duration>	Duration in hours/days/weeks (e.g. 3h, 1d, 0.5w etc)
#	argv[4]: <threads>	(Optional) Number of threads
#	argv[5]: <mem>	(Optional) Memory/RAM in Gb
	
from sys import argv, exit
import getpass, datetime

calling = program = starttime = duration = threads = mem = 'unset'
user = getpass.getuser()
now = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
jobsfile = '/etc/bioinfo.jobs.list'

#parse the input and decide what to append to /etc/bioinfo.jobs.list

if argv[1] == 'status':
	f = open(jobsfile, 'r')
	print f.read(),
	f.close()
	exit()
elif len(argv) >= 4:
	calling = argv[0]
	program = argv[1]
	starttime = argv[2]
	duration = argv[3]
	if len(argv) == 6:
		threads = argv[4]
		mem = argv[5]
else:
	print "Incorrect usage!\n"
	print "Usage: # will be called with\n"
	print "i-want-a-jobby <program name> <start> <duration> <CPUs> <RAM>\n"
	print "Where:\n"
	print "	argv[0] (unsued, =='i-want-a-jobby')\n"
	print "	argv[1]: <program name>	Any text - if \"status\" is used the current jobs list will be printed\n"
	print "	argv[2]: <start>	One of: 'now' 'yyyy-mm-dd' 'yyyy-mm-dd hh:mm'\n"
	print "	argv[3]: <duration>	Duration in hours/days/weeks (e.g. 3h, 1d, 0.5w etc)\n"
	print "	argv[4]: <threads>	(Optional) Number of threads\n"
	print "	argv[5]: <mem>	(Optional) Memory/RAM in Gb\n"
	exit("Incorrect usage, jobs list not written.\n")

	
if starttime == 'now':
	starttime = now
	
#append to /etc/bioinfo.jobs.list
print "added at ", now, "for user ", user, " ", program, starttime, duration, threads, mem

job_log = user + "\t" + program + "\t" + starttime + "\t" + duration + "\t" + threads + "\t" + mem + "\n"
with open(jobsfile, "a") as myfile:
    myfile.write(job_log)
