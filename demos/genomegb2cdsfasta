#!/usr/bin/env python

# DEMO ONLY. Please use for inspiration / ideas, but not for production / analysis.

# demo of using BioPython to extract coding sequences based on CDS features.

# Any questions / feedback / requests for scrutiny please ask at B & B


import sys
import getopt

import Bio
import Bio.SeqIO


def seqRecord2CdsList(seqRecord):
    cdsList = []
    for seqFeature in seqRecord.features:
        if seqFeature.type == 'CDS':
            cdsId = None
            for qualifierName in ['gene', 'locus_tag']:
                if qualifierName in seqFeature.qualifiers:
                    # FIXME: not expecting multiple qualifiers, just taking #0
                    cdsId = seqFeature.qualifiers[qualifierName][0]
                    break
            if cdsId is None:
                cdsId = '%s%s' % (seqRecord.id, str(seqFeature.location))
            cdsId = cdsId.replace(' ', '_')
            cdsSeq = seqFeature.extract(seqRecord.seq)
            cdsList.append(Bio.SeqRecord.SeqRecord(cdsSeq, id=cdsId, description=str(seqFeature.location)))
    return cdsList
    

def genome2cds(infile, inFormat, outfile, outFormat):
    genome = list(Bio.SeqIO.parse(infile, inFormat))
    cdsList = []
    for seqRecord in genome:
        cdsList.extend(seqRecord2CdsList(seqRecord))
    Bio.SeqIO.write(cdsList, outfile, outFormat)


options, args = getopt.getopt(sys.argv[1:], 'h')
for opt, par in options:
    if opt == '-h':
        print 'options:'
        print '-h: print this help and exit'
        sys.exit()
    else:
        raise StandardError, 'unhandled option "%s"' % opt
if len(args) > 0:
    infile = open(args[0], 'r')
else:
    infile = sys.stdin
if len(args) > 1:
    outfile = open(args[1], 'w')
else:
    outfile = sys.stdout
# tested with "GenBank (full)" format download of https://www.ncbi.nlm.nih.gov/nuccore/KJ592713.1
genome2cds(infile, 'genbank', outfile, 'fasta')
